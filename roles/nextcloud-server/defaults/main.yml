hostname_nextcloud: "{{ host_specific_nextcloud_hostname }}"

nextcloud_user_username: nextcloud
nextcloud_user_uid: 3991
nextcloud_user_gid: 3991

# uid/gid that the Nextcloud HTTP server runs with
nextcloud_http_user_uid: 33
nextcloud_http_user_gid: 33

nextcloud_host_command_docker: "/usr/bin/env docker"
nextcloud_host_command_chown: "/usr/bin/env chown"
nextcloud_host_command_mkdir: "/usr/bin/env mkdir"
nextcloud_host_command_sleep: "/usr/bin/env sleep"

# Specifies the path to use for the `HOME` environment variable for systemd unit files.
# Docker 20.10 complains with `WARNING: Error loading config file: .dockercfg: $HOME is not defined`
# if `$HOME` is not defined, so we define something to make it happy.
nextcloud_systemd_unit_home_path: /root

# The Docker network that all services would be put into
nextcloud_docker_network: "nextcloud"

# Controls whether Docker is automatically installed.
# If you change this to false you must install and update Docker manually. You also need to install the docker (https://pypi.org/project/docker/) Python package.
nextcloud_docker_installation_enabled: true

# Controls the Docker package that is installed.
# Possible values are "docker-ce" (default) and "docker.io" (Debian).
nextcloud_docker_package_name: docker-ce

nextcloud_ntpd_package: "{{ 'systemd-timesyncd' if (ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 7) or (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 18)  else ( 'systemd' if ansible_os_family == 'Suse' else 'ntp' ) }}"
nextcloud_ntpd_service: "{{ 'systemd-timesyncd' if (ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 7) or (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 18) or ansible_distribution == 'Archlinux' or ansible_os_family == 'Suse' else ('ntpd' if ansible_os_family == 'RedHat' else 'ntp') }}"

# The architecture that your server runs.
# Recognized values by us are 'amd64'.
# Currently only 'amd64' is supported.
nextcloud_architecture: amd64

# The architecture for Debian packages.
# See: https://wiki.debian.org/SupportedArchitectures
# We just remap from our `nextcloud_architecture` values to what Debian and possibly other distros call things.
nextcloud_debian_arch: "{{ 'armhf' if nextcloud_architecture == 'arm32' else nextcloud_architecture }}"

nextcloud_base_data_path: "/nextcloud"
nextcloud_environment_variables_data_path: "{{ nextcloud_base_data_path }}/environment-variables"
nextcloud_external_storage_path: "{{ nextcloud_base_data_path }}/external-storage"
nextcloud_scratchpad_dir: "{{ nextcloud_base_data_path }}/scratchpad"

nextcloud_nextcloud_data_path: "{{ nextcloud_base_data_path }}/nextcloud-data"
nextcloud_nextcloud_docker_image: "docker.io/nextcloud:23.0.3-apache"

# Controls whether the nextcloud-apache container's memory usage
# is limited and to what extent.
#
# When set, these options are passed to `docker run`
# as `--memory=..` and `--memory-swap=..` respectively.
#
# Expected value format is `[integer][unit]`. E.g. 100M, 1G
#
# If `nextcloud_nextcloud_apache_container_memory_swap_limit` is set,
# it represents the total memory that can be used (memory + swap),
# so it must always be at least as large as `nextcloud_nextcloud_apache_container_memory_limit`.
# To disable swapping, make it the same as `nextcloud_nextcloud_apache_container_memory_limit`.
nextcloud_nextcloud_apache_container_memory_limit: ""
nextcloud_nextcloud_apache_container_memory_swap_limit: ""

# Controls whether the nextcloud-apache container exposes its HTTP port (tcp/80 in the container).
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:37150"), or empty string to not expose.
nextcloud_nextcloud_apache_container_http_host_bind_port: "{{ '' if nextcloud_nginx_proxy_enabled else ('127.0.0.1:' ~ nextcloud_apache_http_port_on_host) }}"

# If `nextcloud_nginx_proxy_enabled` is set to `false`,
# nextcloud-apache's port 80 will be exposed to the container host (127.0.0.1)
# on this port by default.
nextcloud_apache_http_port_on_host: 37150

nextcloud_postgres_connection_hostname: "nextcloud-postgres"
nextcloud_postgres_connection_username: "nextcloud"
nextcloud_postgres_connection_password: "nextcloud-password"
nextcloud_postgres_db_name: "nextcloud"

nextcloud_postgres_docker_image_v9: "docker.io/postgres:9.6.23-alpine"
nextcloud_postgres_docker_image_v10: "docker.io/postgres:10.20-alpine"
nextcloud_postgres_docker_image_v11: "docker.io/postgres:11.15-alpine"
nextcloud_postgres_docker_image_v12: "docker.io/postgres:12.10-alpine"
nextcloud_postgres_docker_image_v13: "docker.io/postgres:13.6-alpine"
nextcloud_postgres_docker_image_v14: "docker.io/postgres:14.2-alpine"
nextcloud_postgres_docker_image_latest: "{{ nextcloud_postgres_docker_image_v14 }}"

nextcloud_postgres_data_path: "{{ nextcloud_base_data_path }}/postgres"

# Controls whether the nextcloud-postgres container exposes a port (tcp/5432 in the
# container) that can be used to access the database from outside the container (e.g. with psql)
#
# psql postgresql://username:password@localhost:<port>/database_name
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:5432"), or empty string to not expose.
nextcloud_postgres_container_postgres_bind_port: ""

# A list of extra arguments to pass to the container
nextcloud_postgres_container_extra_arguments: []

# A list of extra arguments to pass to the postgres process
# e.g. "-c 'max_connections=200'"
nextcloud_postgres_process_extra_arguments: []

# A list of configuration parameters for Nextcloud.
# To define your own, we advise editing `nextcloud_config_additional_parameters`.
nextcloud_config_parameters: "{{ nextcloud_config_default_parameters + nextcloud_config_additional_parameters }}"

# Default configuration parameters to apply to Nextcloud.
# To add your own additional parameters, use `nextcloud_config_additional_parameters`.
# To get rid of these defaults, redefine `nextcloud_config_default_parameters` or `nextcloud_config_parameters`.
nextcloud_config_default_parameters:
  - key: overwriteprotocol
    value: "https"
    type: string
  - key: overwrite.cli.url
    value: "https://{{ host_specific_nextcloud_hostname }}"
    type: string

# Add your custom Nextcloud configuration parameters here.
#
# Example:
# nextcloud_config_additional_parameters:
#   - key: mail_smtphost
#     value: smtp.example.com
#     type: string
nextcloud_config_additional_parameters: []

# Specifies when to restart the Nextcloud services so that
# a new SSL certificate could go into effect (UTC time).
nextcloud_services_restart_cron_time_definition: "15 4 3 * *"


nextcloud_goofys_external_storage_enabled: false
nextcloud_goofys_docker_image: "docker.io/cloudproto/goofys:latest"
nextcloud_goofys_external_storage_path: "{{ nextcloud_external_storage_path }}/goofys"
nextcloud_goofys_external_storage_bucket_name: "your-bucket-name"
nextcloud_goofys_external_storage_aws_access_key: "your-aws-access-key"
nextcloud_goofys_external_storage_aws_secret_key: "your-aws-secret-key"
nextcloud_goofys_external_storage_region: "eu-central-1"
# Custom endpoint for non AWS S3 storage
nextcloud_goofys_external_storage_endpoint: ""
# Controls whether appdata previews are stored in Goofys as well.
# For this to work, you need to specify a correct instance id.
nextcloud_goofys_external_storage_for_appdata_previews_enabled: false
nextcloud_goofys_external_storage_for_appdata_previews_instance_id: "ocdmh6gdl21v"


# By default, this playbook sets up its own nginx proxy server on port 80/443.
# This is fine if you're dedicating the whole server to Nextcloud.
# But in case that's not the case, you may wish to prevent that
# and take care of proxying by yourself.
nextcloud_nginx_proxy_enabled: true

# Specifies how the nginx configuration should be generated with regard to how services are reached.
nextcloud_nginx_proxy_service_reach_mode: "{{ 'container' if nextcloud_nginx_proxy_enabled else 'local' }}"

nextcloud_nginx_proxy_docker_image: "docker.io/nginx:1.21.6-alpine"

nextcloud_nginx_proxy_data_path: "{{ nextcloud_base_data_path }}/nginx-proxy"
nextcloud_nginx_proxy_confd_path: "{{ nextcloud_nginx_proxy_data_path }}/conf.d"

nextcloud_nginx_proxy_client_max_body_size: "4G"

nextcloud_nginx_proxy_ssl_protocols: "TLSv1.2 TLSv1.3"

nextcloud_ssl_base_path: "{{ nextcloud_base_data_path }}/ssl"
nextcloud_ssl_config_dir_path: "{{ nextcloud_ssl_base_path }}/config"
nextcloud_ssl_log_dir_path: "{{ nextcloud_ssl_base_path }}/log"
nextcloud_ssl_support_email: "{{ host_specific_nextcloud_ssl_support_email }}"
nextcloud_ssl_certbot_docker_image: "docker.io/certbot/certbot:v1.23.0"
nextcloud_ssl_certbot_standalone_http_port: 2403
nextcloud_ssl_use_staging: false

# Specifies when to attempt to retrieve new SSL certificates from Let's Encrypt.
nextcloud_ssl_renew_cron_time_definition: "15 5 */5 * *"

# The full list of domains that this role will obtain certificates for.
# This variable is likely redefined outside of the role, to include the domains that are necessary (depending on the services that are enabled).
# To add additional domain names, consider using `nextcloud_ssl_additional_domains_to_obtain_certificates_for` instead.
nextcloud_ssl_domains_to_obtain_certificates_for: "{{ nextcloud_ssl_additional_domains_to_obtain_certificates_for }}"

# A list of additional domain names to obtain certificates for.
nextcloud_ssl_additional_domains_to_obtain_certificates_for: []


nextcloud_onlyoffice_enabled: false
nextcloud_onlyoffice_document_server_docker_image: "docker.io/onlyoffice/documentserver:7.0"

# If `nextcloud_nginx_proxy_enabled` is set to `true`,
# nextcloud-onlyoffice-document-server's port 80 is exposed to the container host (127.0.0.1)
# on this port by default.
nextcloud_onlyoffice_document_server_http_port_on_host: 37180

nextcloud_previewgenerator_enabled: false

nextcloud_previewgenerator_configurations:
- key: squareSizes
  value: "32 64 1024"
- key: widthSizes
  value: "64 128 1024"
- key: heightSizes
  value: "64 256 1024"

nextcloud_previewgenerator_timer: "OnCalendar=hourly"
nextcloud_previewgenerator_lock_file_path: "{{ nextcloud_base_data_path }}/preview_generate_all_done"
