{% macro render_onlyoffice_locations(nextcloud_nginx_proxy_enabled) %}
	location ~* ^/onlyoffice-document-server/ {
		{% if nextcloud_nginx_proxy_enabled %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			{#
				Defining this backend before `rewrite` (below),
				otherwise it wouldn't error out as an undefined variable.
			#}
			resolver 127.0.0.11 valid=5s;
			set $backend "nextcloud-onlyoffice-document-server:80";
		{% endif %}

		rewrite /onlyoffice-document-server/(.*) /$1 break;

		{% if nextcloud_nginx_proxy_enabled %}
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for people to use outside of our container setup #}
			proxy_pass http://127.0.0.1:{{ nextcloud_onlyoffice_document_server_http_port_on_host }};
		{% endif %}

		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Host $http_host/onlyoffice-document-server;
	}
{% endmacro %}

server {
	{% if nextcloud_nginx_proxy_service_reach_mode == 'container' %}
		listen 8080;
		listen [::]:8080;
	{% else %}
		listen 80;
		listen [::]:80;
	{% endif %}
	server_name {{ hostname_nextcloud }};

	server_tokens off;

	location /.well-known/acme-challenge {
		{% if nextcloud_nginx_proxy_service_reach_mode == 'container' %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			resolver 127.0.0.11 valid=5s;
			set $backend "nextcloud-certbot:80";
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for use outside of our container setup #}
			proxy_pass http://127.0.0.1:{{ nextcloud_ssl_certbot_standalone_http_port }};
		{% endif %}
	}

	location / {
		return 301 https://$http_host$request_uri;
	}
}

server {
	{% if nextcloud_nginx_proxy_service_reach_mode == 'container' %}
		listen 8443 ssl http2;
		listen [::]:8443 ssl http2;
	{% else %}
		listen 443 ssl http2;
		listen [::]:443 ssl http2;
	{% endif %}
	server_name {{ hostname_nextcloud }};

	server_tokens off;
	root /dev/null;

	ssl_certificate {{ nextcloud_ssl_config_dir_path }}/live/{{ hostname_nextcloud }}/fullchain.pem;
	ssl_certificate_key {{ nextcloud_ssl_config_dir_path }}/live/{{ hostname_nextcloud }}/privkey.pem;
	ssl_protocols {{ nextcloud_nginx_proxy_ssl_protocols }};
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

	client_body_buffer_size 20M;
	client_max_body_size {{ nextcloud_nginx_proxy_client_max_body_size }};
	proxy_max_temp_file_size 0;

	{% if nextcloud_onlyoffice_enabled %}
		{{ render_onlyoffice_locations(nextcloud_nginx_proxy_enabled) }}
	{% endif %}

	rewrite ^/\.well-known/carddav https://$http_host/remote.php/dav/ permanent;
	rewrite ^/\.well-known/caldav https://$http_host/remote.php/dav/ permanent;

	location / {
		{% if nextcloud_nginx_proxy_service_reach_mode == 'container' %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			resolver 127.0.0.11 valid=5s;
			set $backend "nextcloud-apache:80";
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for people to use outside of our container setup #}
			proxy_pass http://127.0.0.1:{{ nextcloud_apache_http_port_on_host }};
		{% endif %}

		# We disable request buffering in order to directly pass the request to the upstream server.
		# Otheriwse, we need to buffer it all on our side (in memory) before we pass it along.
		# Buffering GB of data in memory is not feasible, so we can't do that.
		proxy_request_buffering off;

		proxy_read_timeout 120s;

		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		add_header Front-End-Https on;
		add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
	}
}
